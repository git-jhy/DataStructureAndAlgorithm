package com.github.junyu.solution.leetCode.easy.string;

public class _1332_Remove_Palindromic_Subsequences {


    /*Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic
    subsequence from s.

    Return the minimum number of steps to make the given string empty.

    A string is a subsequence of a given string, if it is generated by deleting some characters of a given string
    without changing its order.

    A string is called palindrome if is one that reads the same backward as well as forward.

    Example 1:

    Input: s = "ababa"
    Output: 1
    Explanation: String is already palindrome
    Example 2:

    Input: s = "abb"
    Output: 2
    Explanation: "abb" -> "bb" -> "".
    Remove palindromic subsequence "a" then "bb".
    Example 3:

    Input: s = "baabb"
    Output: 2
    Explanation: "baabb" -> "b" -> "".
    Remove palindromic subsequence "baab" then "b".
    Example 4:

    Input: s = ""
    Output: 0


    Constraints:

            0 <= s.length <= 1000
    s only consists of letters 'a' and 'b'*/

    /**
     * 删除回文子序列，将字符串删除需要的最少次数，每次删除一个回文子序列。
     * 思路：看了下子序列的定义，这个题目就easy了，只要从原字符串中抽出的字符能够组成回文就行。
     * 由于只有a和b组成，那么只要抽出所有的a或者b，剩下的自然也是回文了。
     * 总共就分为三种情况：
     * 1.字符串长度为0,无需操作返回0
     * 2.字符串已经是回文，返回1.
     * 3.字符串不是回文，返回2，也就是上面描述的删除法。
     *
     * @param s
     * @return
     */
    public int removePalindromeSub(String s) {
        if (s.length() == 0)
            return 0;
        int mid = s.length() / 2;
        int len = s.length() - 1;
        for (int i = 0; i < mid; i++) {
            if (s.charAt(i) != s.charAt(len - i))
                return 2;
        }
        return 1;
    }


    public static void main(String[] args) {
        _1332_Remove_Palindromic_Subsequences test = new _1332_Remove_Palindromic_Subsequences();
        System.out.println(test.removePalindromeSub("ababa"));
        System.out.println(test.removePalindromeSub("abb"));
        System.out.println(test.removePalindromeSub("baabb"));
        System.out.println(test.removePalindromeSub(""));
        System.out.println(test.removePalindromeSub("adffffcc"));
        System.out.println(test.removePalindromeSub("bbaabaaa"));
    }
}
